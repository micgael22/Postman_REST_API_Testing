{
	"info": {
		"_postman_id": "de3fcb9b-3b00-45e3-a788-2e8fe7ad0114",
		"name": "testsAndScriptingAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24769043"
	},
	"item": [
		{
			"name": "New board Tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"console.log(response);\r",
							"\r",
							"pm.test(\"Board should be created\", function () {\r",
							"    pm.expect(response.name).to.eql(pm.environment.get(\"boardName\"));\r",
							"    pm.expect(response.closed).to.eql(false);\r",
							"});\r",
							"\r",
							"pm.test(\"Board should be private\", function () {\r",
							"    pm.expect(response.prefs.permissionLevel).to.eql(\"private\");\r",
							"});\r",
							"\r",
							"pm.globals.set(\"boardId\", response.id);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"boardName\", getRandomBoardName());\r",
							"\r",
							"function getRandomBoardName() {\r",
							"    const boardName = \"My board name \" + parseInt(Math.random() * 10000);\r",
							"    console.log(boardName);\r",
							"    return boardName;\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/boards/?name={{boardName}}&key={{trelloKey}}&token={{trelloToken}}&defaultLists=false",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"boards",
						""
					],
					"query": [
						{
							"key": "name",
							"value": "{{boardName}}"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "defaultLists",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create TODO list GV",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const response = pm.response.json();",
							"",
							"pm.test(\"List should be created\", function () { ",
							"    pm.expect(response.name).to.eql(\"TODO\");",
							"    pm.expect(response.closed).to.eql(false);",
							"});",
							"",
							"pm.test(\"List was created inside the board\", function () {",
							"    pm.expect(response.idBoard).to.eql(pm.globals.get(\"boardId\"));",
							"",
							"});",
							"",
							"// pm.globals.unset(\"boardId\");",
							"// console.log(response);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api.trello.com/1/lists?name=TODO&idBoard={{boardId}}&key={{trelloKey}}&token={{trelloToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"lists"
					],
					"query": [
						{
							"key": "name",
							"value": "TODO"
						},
						{
							"key": "idBoard",
							"value": "{{boardId}}"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Advance Chai assertion learning",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"using eql\", function () {\r",
							"    let a = {\r",
							"        \"name\" : \"John\"\r",
							"    };\r",
							"    let b = {\r",
							"        \"name\" : \"John\"\r",
							"    };\r",
							"    pm.expect(a).to.eql(b, '1');\r",
							"});\r",
							"\r",
							"pm.test(\"using not to\", function () {\r",
							"     let a = {\r",
							"        \"name\" : \"John\"\r",
							"    };\r",
							"    let b = {\r",
							"        \"name\" : \"Jane\"\r",
							"    };\r",
							"    pm.expect(a).to.not.eql(b);\r",
							"});\r",
							"\r",
							"pm.test(\"try to avoid using equal\", function () {\r",
							"    let a = {\r",
							"        \"name\" : \"John\"\r",
							"    };\r",
							"    let b = {\r",
							"        \"name\" : \"John\"\r",
							"    };\r",
							"    pm.expect(a).to.equal(b, '2');\r",
							"});\r",
							"\r",
							"pm.test(\"Assertion with boolean\", function () {\r",
							"     pm.expect(true).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Assertion with null\", function () {\r",
							"    pm.expect(null).to.be.null;\r",
							"});\r",
							"\r",
							"pm.test(\"using undefined\", function () {\r",
							"    pm.expect(undefined).to.be.undefined;\r",
							"});\r",
							"\r",
							"pm.test(\"empty array\", function () {\r",
							"    pm.expect([]).to.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"array include\", function () {\r",
							"    pm.expect([1,2,3]).to.include(2);\r",
							"});\r",
							"\r",
							"pm.test(\"one of the values\", function () {\r",
							"    pm.expect(4).to.be.oneOf([4,5,6]);\r",
							"});\r",
							"\r",
							"pm.test(\"Using strings\", function () {\r",
							"    pm.expect('Jack Joe').to.match(/^Jack/);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}",
					"host": [
						"{{baseUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Assertions on arrays",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"let manufacturer;\r",
							"\r",
							"for (let filter of jsonData.filters) {\r",
							"\r",
							"    if (filter.name == \"MANUFACTURER\") {\r",
							"        manufacturer = filter;\r",
							"    }\r",
							"}\r",
							"\r",
							"console.log(manufacturer);\r",
							"\r",
							"pm.test(\"Manufacturer should not be allowed\", function() {\r",
							"    pm.expect(manufacturer.name).to.eql(\"MANUFACTURER\");\r",
							"    pm.expect(manufacturer.isAllowed).to.be.false;\r",
							"});\r",
							"\r",
							"// let jsonData = pm.response.json();\r",
							"\r",
							"// let manufacturer = jsonData.filters[2];\r",
							"// console.log(manufacturer);\r",
							"\r",
							"// pm.test(\"Manufacturer should not be allowed\", function() {\r",
							"//     pm.expect(manufacturer.name).to.eql(\"MANUFACTURER\");\r",
							"//     pm.expect(manufacturer.isAllowed).to.be.false;\r",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"companyId\": 10101,\r\n    \"regionId\": 36554,\r\n    \"filters\": [\r\n        {\r\n            \"id\": 101,\r\n            \"name\": \"VENDOR\",\r\n            \"isAllowed\": false\r\n        },\r\n        {\r\n            \"id\": 102,\r\n            \"name\": \"COUNTRY\",\r\n            \"isAllowed\": true\r\n        },\r\n        {\r\n            \"id\": 103,\r\n            \"name\": \"MANUFACTURER\",\r\n            \"isAllowed\": false\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://www.mocky.io/v2/5ab350d62f00005a00ca3663",
					"protocol": "http",
					"host": [
						"www",
						"mocky",
						"io"
					],
					"path": [
						"v2",
						"5ab350d62f00005a00ca3663"
					]
				}
			},
			"response": []
		},
		{
			"name": "Assertions on nested objects",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"let commentsStatus = jsonData.prefs.comments.status;\r",
							"\r",
							"console.log(commentsStatus);\r",
							"\r",
							"pm.test(\"comments should be disabled\", function() {\r",
							"    pm.expect(commentsStatus).to.eql(\"disabled\")\r",
							"});\r",
							"\r",
							"\r",
							"let boardStatus;\r",
							"\r",
							"for (let key in jsonData.limits) {\r",
							"    console.log(key, jsonData.limits[key]);\r",
							"    if (jsonData.limits[key].hasOwnProperty('boards')) {\r",
							"        boardStatus = jsonData.limits[key].boards.totalPerMember.status;\r",
							"\r",
							"    }\r",
							"}\r",
							"pm.test(\"status should be ok\", function() {\r",
							"    pm.expect(boardStatus).to.eql(\"ok\");\r",
							"});\r",
							"// let boardStatus = jsonData.limits['54bba24af6196bd5f824e563'].boards.totalPerMember.status;\r",
							"// console.log(boardStatus);\r",
							"\r",
							"// pm.test(\"status should be ok\", function() {\r",
							"//     pm.expect(boardStatus).to.eql(\"ok\");\r",
							"// });\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"companyId\": 10101,\r\n    \"regionId\": 36554,\r\n    \"filters\": [\r\n        {\r\n            \"id\": 101,\r\n            \"name\": \"VENDOR\",\r\n            \"isAllowed\": false\r\n        },\r\n        {\r\n            \"id\": 102,\r\n            \"name\": \"COUNTRY\",\r\n            \"isAllowed\": true\r\n        },\r\n        {\r\n            \"id\": 103,\r\n            \"name\": \"MANUFACTURER\",\r\n            \"isAllowed\": false\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://www.mocky.io/v2/5ab34d8c2f00006600ca3652",
					"protocol": "http",
					"host": [
						"www",
						"mocky",
						"io"
					],
					"path": [
						"v2",
						"5ab34d8c2f00006600ca3652"
					]
				}
			},
			"response": []
		},
		{
			"name": "Assertions Extra Assignment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"    \r",
							"    console.log(response.other);\r",
							"\r",
							"    pm.test(\"Person is Jane\", () => {\r",
							"        pm.expect(response.name).to.eql(\"Jane\");\r",
							"        pm.expect(response.age).to.eql(29);\r",
							"        pm.expect(response.other.email).to.eql(\"jane@example.com\");\r",
							"        // pm.expect(response.other[\"scocial-media\"]).to.eql(\"Instagram\");\r",
							"        pm.expect(response.other[\"social-media\"]).to.include(\"Instagram\");\r",
							"    });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"companyId\": 10101,\r\n    \"regionId\": 36554,\r\n    \"filters\": [\r\n        {\r\n            \"id\": 101,\r\n            \"name\": \"VENDOR\",\r\n            \"isAllowed\": false\r\n        },\r\n        {\r\n            \"id\": 102,\r\n            \"name\": \"COUNTRY\",\r\n            \"isAllowed\": true\r\n        },\r\n        {\r\n            \"id\": 103,\r\n            \"name\": \"MANUFACTURER\",\r\n            \"isAllowed\": false\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://run.mocky.io/v3/25e2d802-a744-470d-8c60-6acb338407e9",
					"protocol": "https",
					"host": [
						"run",
						"mocky",
						"io"
					],
					"path": [
						"v3",
						"25e2d802-a744-470d-8c60-6acb338407e9"
					]
				}
			},
			"response": []
		},
		{
			"name": "Assertions complex Assignment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"    \r",
							"    //console.log(response.other);\r",
							"    //console.log(response.other[\"social-media\"] [1]);\r",
							"\r",
							"    const person = response.find(item => item.name === \"Jane\");\r",
							"    console.log(person);\r",
							"\r",
							"    pm.test(\"Person is Jane\", () => {\r",
							"        pm.expect(person.name).to.eql(\"Jane\");\r",
							"        pm.expect(person.age).to.eql(29);\r",
							"        pm.expect(person.other.email).to.eql(\"jane@example.com\");\r",
							"        // pm.expect(response.other[\"scocial-media\"]).to.eql(\"Instagram\");\r",
							"        pm.expect(person.other[\"social-media\"]).to.include(\"Instagram\");\r",
							"    });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"companyId\": 10101,\r\n    \"regionId\": 36554,\r\n    \"filters\": [\r\n        {\r\n            \"id\": 101,\r\n            \"name\": \"VENDOR\",\r\n            \"isAllowed\": false\r\n        },\r\n        {\r\n            \"id\": 102,\r\n            \"name\": \"COUNTRY\",\r\n            \"isAllowed\": true\r\n        },\r\n        {\r\n            \"id\": 103,\r\n            \"name\": \"MANUFACTURER\",\r\n            \"isAllowed\": false\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://run.mocky.io/v3/f8e66f89-6197-4cd2-83d6-3b8fca979ad0",
					"protocol": "https",
					"host": [
						"run",
						"mocky",
						"io"
					],
					"path": [
						"v3",
						"f8e66f89-6197-4cd2-83d6-3b8fca979ad0"
					]
				}
			},
			"response": []
		},
		{
			"name": "usingNewman",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.getpostman.com/collections/24769043-fc1dd955-eae0-4ef1-a179-316a0e45f51e?apikey=PMAK-63c4388b6ee73300474c6792-5716bf783c35fd2dbd1e7422b56a4e34e6",
					"protocol": "https",
					"host": [
						"api",
						"getpostman",
						"com"
					],
					"path": [
						"collections",
						"24769043-fc1dd955-eae0-4ef1-a179-316a0e45f51e"
					],
					"query": [
						{
							"key": "apikey",
							"value": "PMAK-63c4388b6ee73300474c6792-5716bf783c35fd2dbd1e7422b56a4e34e6"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://api.trello.com/"
		},
		{
			"key": "trelloKey",
			"value": " 7b0abc9be2e24b63f05dc8d0a61596e2"
		},
		{
			"key": "trelloToken",
			"value": "ATTAbe84d83fb79bde2017936739673dd0f8e07fd09220347471fcf4a524929ffb05A6C78C05"
		}
	]
}